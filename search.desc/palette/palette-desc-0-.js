searchState.loadedDescShard("palette", 0, "A library that makes linear color calculations and …\nNon-linear Adobe RGB.\nNon-linear Adobe RGB with an alpha component.\nAn alpha component wrapper for colors, for adding …\nExtension trait for fixed size arrays.\nAn operator for restricting a color’s components to …\nAn assigning operator for restricting a color’s …\nThe opaque color type, without any transparency.\nOperators for darkening a color;\nAssigning operators for darkening a color;\nOperator for decreasing the saturation (or chroma) of a …\nAssigning operator for decreasing the saturation (or …\nGamma 2.2 encoded luminance.\nGamma 2.2 encoded luminance with an alpha component.\nGamma 2.2 encoded sRGB.\nGamma 2.2 encoded sRGB with an alpha component.\nA trait for colors where a hue may be calculated.\nHSL color space.\nLinear HSL with an alpha component. See the <code>Hsla</code> …\nHSLuv color space.\nHSLuv with an alpha component. See the <code>Hsluva</code> …\nHSV color space.\nLinear HSV with an alpha component. See the <code>Hsva</code> …\nThe kind of hue unit this color space uses.\nHWB color space.\nLinear HWB with an alpha component. See the <code>Hwba</code> …\nChecks if color components are within their expected range …\nThe type of the array’s items.\nThe number of items in the array.\nThe CIE L*a*b* (CIELAB) color space.\nA hue type for the CIE L*a*b* family of color spaces.\nCIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …\nCIE L*C*h°, a polar version of CIE L*a*b*.\nCIE L*C*h° with an alpha component. See the <code>Lcha</code> …\nCIE L*C*uv h°uv, a polar version of CIE L*u*v*.\nCIE L*C*uv h°uv with an alpha component. See the <code>Lchuva</code> …\nOperators for lightening a color.\nAssigning operators for lightening a color.\nLinear Adobe RGB.\nLinear Adobe RGB with an alpha component.\nLinear luminance.\nLinear luminance with an alpha component.\nLinear Rec. 2020.\nLinear sRGB.\nLinear sRGB with an alpha component.\nThe CIE L*u*v* (CIELUV) color space.\nA hue type for the CIE L*u*v* family of color spaces.\nCIE L*u*v* (CIELUV) with an alpha component. See the <code>Luva</code> …\nA 9 element array representing a 3x3 matrix.\nLinear color interpolation of two colors.\nAssigning linear color interpolation of two colors.\nAn array of size <code>N + 1</code>.\nTemporary helper trait for getting an array type of size …\nA Hue/Saturation/Lightness representation of <code>Oklab</code> in the …\nOkhsl with an alpha component.\nA Hue/Saturation/Value representation of <code>Oklab</code> in the <code>sRGB</code> …\nOkhsv with an alpha component. See the <code>Okhsva</code> …\nA Hue/Whiteness/Blackness representation of <code>Oklab</code> in the …\nOkhwb with an alpha component. See the <code>Okhwba</code> …\nThe Oklab color space.\nA hue type for the Oklab color space.\nOklab with an alpha component.\nOklch, a polar version of Oklab.\nOklch with an alpha component. See the <code>Oklcha</code> …\nNon-linear Rec. 2020, a wide color gamut RGB format.\nRec. 709.\nA trait for calculating relative contrast between two …\nA hue type for the RGB family of color spaces.\nOperator for increasing the saturation (or chroma) of a …\nAssigning operator for increasing the saturation (or …\nThe type of the contrast ratio.\nThe type of the mixing factor.\nThe type of the mixing factor.\nThe type of the lighten modifier.\nThe type of the lighten modifier.\nThe type of the darken modifier.\nThe type of the darken modifier.\nThe type of the hue modifier.\nThe type of the hue modifier.\nThe type of the saturation modifier.\nThe type of the saturation modifier.\nThe type of the desaturation modifier.\nThe type of the desaturation modifier.\nChange the hue of a color to a specific value without …\nOperator for increasing or decreasing the hue by an amount.\nAssigning operator for increasing or decreasing the hue by …\nNon-linear sRGB, the most common RGB input/output format.\nsRGB encoded luminance.\nsRGB encoded luminance with an alpha component.\nNon-linear sRGB with an alpha component.\nA trait for color types that can have or be given …\nThe color type with transparency applied.\nChange the hue of a color to a specific value.\nThe CIE 1931 XYZ color space.\nCIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …\nThe CIE 1931 Yxy (xyY) color space.\nCIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …\na* goes from red at -128 to green at 127.\n<code>a</code> changes the hue from reddish to greenish, when moving …\nTypes related to transparent colors.\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nTraits for working with angular values, such as for in …\nb* goes from yellow at -128 to blue at 127.\n<code>b</code> changes the hue from yellowish to blueish, when moving …\nThe blackness of the color. It specifies the amount black …\nThe amount of black, mixed in the pure hue, ranging from …\nColor blending and blending equations.\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nTraits for abstracting over Boolean types.\nTypes for the CIE CAM16 color appearance model.\nTraits and functions for casting colors to and from other …\nC* is the colorfulness of the color. It’s similar to …\nC*uv is the colorfulness of the color. It’s similar to …\n<code>chroma</code> is the colorfulness of the color. A color with …\nConvert colors from one reference white point to another\nReturn a new color where out-of-bounds components have …\nChanges out-of-bounds components to the nearest valid …\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nAlgorithms for calculating the difference between colors.\nTraits related to traditional color theory.\nCalculate the ratio between two <code>luma</code> values.\nTraits for converting between color spaces.\nScale the color towards the minimum lightness by <code>factor</code>, a …\nScale the color towards the minimum lightness by <code>factor</code>, a …\nDarken the color by <code>amount</code>, a value ranging from <code>0.0</code> to <code>1.0</code>…\nDarken the color by <code>amount</code>, a value ranging from <code>0.0</code> to <code>1.0</code>…\nScale the color towards the minimum saturation by <code>factor</code>, …\nScale the color towards the minimum saturation by <code>factor</code>, …\nIncrease the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…\nIncrease the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…\nNumber and color encoding traits, types and standards.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>lab</code> to <code>Okhwb</code> in the bounds of sRGB.\nCalculate the contrast ratio between two colors.\nCalculate a hue if possible.\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nVerify the contrast between two colors satisfies SC 1.4.6 …\nVerify the contrast between two colors satisfies SC 1.4.6 …\nVerify the contrast between two colors satisfies SC 1.4.6. …\nVerify the contrast between two colors satisfies SC 1.4.6. …\nVerify the contrast between two colors satisfies SC 1.4.11 …\nVerify the contrast between two colors satisfies SC 1.4.11 …\nVerify the contrast between two colors satisfies SC 1.4.3 …\nVerify the contrast between two colors satisfies SC 1.4.3 …\nVerify the contrast between two colors satisfies SC 1.4.3. …\nVerify the contrast between two colors satisfies SC 1.4.3. …\nTypes for the HSL color space.\nTypes for the HSLuv color space.\nTypes for the HSV color space.\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees of a circle.\nThe hue of the color, in degrees of a circle.\nThe hue of the color, in degrees of a circle.\nh is the hue of the color, in degrees. Decides if it’s …\nHues and hue related types.\nTypes for the HWB color space.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the color’s components are within the expected …\nDecides how light the color will look. 0.0 will be black, …\nL* is the lightness of the color. 0.0 gives absolute black …\nL* is the lightness of the color. 0.0 gives absolute black …\nL* is the lightness of the color. 0.0 gives absolute black …\nL* is the lightness of the color. 0.0 gives absolute black …\n<code>l</code> is the lightness of the color. <code>0</code> gives absolute black …\nL is the lightness of the color. 0 gives absolute black …\nTypes for the CIE L*a*b* (CIELAB) color space.\nTypes for the CIE L*C*h° color space.\nTypes for the CIE L*C*uv h°uv color space.\nScale the color towards the maximum lightness by <code>factor</code>, a …\nScale the color towards the maximum lightness by <code>factor</code>, a …\nLighten the color by <code>amount</code>, a value ranging from <code>0.0</code> to …\nLighten the color by <code>amount</code>, a value ranging from <code>0.0</code> to …\nDecides how light the color will look. 0.0 will be black, …\nThe relative luminance of the color, where\nTypes for the LMS color space.\nTypes for luma and luminance (grayscale) values.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nluma (Y) was a measure of the brightness or luminance of a …\nTypes for the CIE L*u*v* (CIELUV) color space.\nMix the color with an other color, by <code>factor</code>.\nMix the color with an other color, by <code>factor</code>.\nA collection of named color constants. Can be toggled with …\nTraits for abstracting over numeric types.\nTypes for the Okhsl color space.\nTypes for the Okhsv color space.\nTypes for the Okhwb color space.\nTypes for the Oklab color space.\nTypes for the Oklch color space.\nTransforms the color into a fully opaque color with a …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nTypes for the RGB color space, including spaces and …\nScale the color towards the maximum saturation by <code>factor</code>, …\nScale the color towards the maximum saturation by <code>factor</code>, …\nIncrease the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…\nIncrease the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…\nThe colorfulness of the color. 0.0 gives gray scale colors …\nThe colorfulness of the color, as a percentage of the …\nThe colorfulness of the color. 0.0 gives gray scale colors …\nThe saturation (freedom of black or white) of the color.\nThe saturation (freedom of whitishness) of the color.\nUtilities for serializing and deserializing with <code>serde</code>.\nChange the hue to a specific value.\nReturn a copy of <code>self</code> with the hue shifted by <code>amount</code>.\nShifts the hue by <code>amount</code>.\nSplits the color into separate color and transparency …\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe white point and RGB primaries this color is adapted …\nThe white point and RGB primaries this color is adapted …\nThe white point and RGB primaries this color is adapted …\nTraits for working with stimulus colors and values, such …\nTransforms the color into a fully transparent color. If …\nThe range of valid u* varies depending on the values of L* …\nThe range of valid v* varies depending on the values of L* …\nDecides how bright the color will look. 0.0 will be black, …\nThe monochromatic brightness of the color.\nDefines the tristimulus values of the CIE Illuminants.\nThe white point and RGB primaries this color is adapted …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe whiteness of the color. It specifies the amount white …\nThe amount of white, mixed in the pure hue, ranging from …\nTransforms the color into a transparent color with the …\nReturn a copy of <code>self</code> with a specific hue.\nRemoves the transparency from the color. If <code>Self::Color</code> has\nX is the scale of what can be seen as a response curve for …\nx chromaticity co-ordinate derived from XYZ color space as …\nTypes for the CIE 1931 XYZ color space.\nY is the luminance of the color, where 0.0 is black and …\ny chromaticity co-ordinate derived from XYZ color space as …\nTypes for the CIE 1931 Yxy (xyY) color space.\nZ is the scale of what can be seen as the blue …\nAn alpha component wrapper for colors, for adding …\nThe opaque color type, without any transparency.\nAn iterator for transparent colors.\nSample transparent colors uniformly.\nA trait for color types that can have or be given …\nThe color type with transparency applied.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nConvert from a <code>(J&#39;, M&#39;, h&#39;, a)</code> tuple.\nConvert from a <code>(red, green, blue, alpha)</code> tuple.\nConvert from a <code>(lightness, colorfulness, hue, alpha)</code> tuple.\nConvert from a <code>(brightness, saturation, hue, alpha)</code> tuple.\nConvert from a <code>(long, medium, short, alpha)</code> tuple.\nConvert from a <code>(J&#39;, a&#39;, b&#39;, a)</code> tuple.\nConvert from a <code>(hue, saturation, l, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, value, alpha)</code> tuple.\nConvert from a <code>(L, a, b, alpha)</code> tuple.\nConvert from a <code>(L\\*, C\\*uv, h°uv, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, lightness, alpha)</code> tuple.\nConvert from u <code>(L\\*, u\\*, v\\*, alpha)</code> tuple.\nConvert from a <code>(lightness, saturation, hue, alpha)</code> tuple.\nConvert from a <code>(brightness, colorfulness, hue, alpha)</code> …\nConvert from a <code>(lightness, chroma, hue, alpha)</code> tuple.\nConvert from a <code>(X, Y, Z, alpha)</code> tuple.\nConvert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.\nConvert from a <code>(L\\*, a\\*, b\\*, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, value, alpha)</code> tuple.\nConvert from a <code>(L\\*, C\\*, h°, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, lightness, alpha)</code> tuple.\nConvert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.\nConvert from a <code>(luma, alpha)</code> tuple.\nConvert from a <code>(L, C, h, alpha)</code> tuple.\nConvert from a <code>(brightness, chroma, hue, alpha)</code> tuple.\nConvert RGB from a different encoding to linear with …\nConvert to linear luminance from a different encoding with …\nConvert the RGBA components from other number types.\nConvert from another component type.\nConvert from another component type.\nConvert from another component type.\nConvert from another component type.\nConvert the LMSA components from other number types.\nConvert from another component type.\nConvert from another component type.\nConvert from another component type.\nCreate a partial set of CIE CAM16 attributes with …\nCreate a partial set of CIE CAM16 attributes with …\nCreate a partial set of CIE CAM16 attributes with …\nCreate a partial set of CIE CAM16 attributes with …\nCreate a partial set of CIE CAM16 attributes with …\nCreate a partial set of CIE CAM16 attributes with …\nConvert linear luminance to non-linear luminance with …\nConvert linear RGB to non-linear RGB with transparency.\nConvert from a packed <code>u16</code> with a specific component order.\nConvert from a packed <code>u32</code> with specifiable component order.\nDerive partial CIE CAM16 attributes with transparency, for …\nDerive partial CIE CAM16 attributes with transparency, for …\nDerive partial CIE CAM16 attributes with transparency, for …\nDerive partial CIE CAM16 attributes with transparency, for …\nDerive partial CIE CAM16 attributes with transparency, for …\nDerive partial CIE CAM16 attributes with transparency, for …\nDerive CIE CAM16 attributes with transparency for the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(brightness, saturation, hue, alpha)</code> tuple.\nConvert to a <code>(L, C, h, alpha)</code> tuple.\nConvert to a <code>(long, medium, short, alpha)</code> tuple.\nConvert to a <code>(lightness, chroma, hue, alpha)</code> tuple.\nConvert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nConvert to a <code>(X, Y, Z, alpha)</code> tuple.\nConvert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.\nConvert to a <code>(J&#39;, a&#39;, b&#39;, a)</code> tuple.\nConvert to a <code>(J&#39;, M&#39;, h&#39;, a)</code> tuple.\nConvert to a <code>(red, green, blue, alpha)</code> tuple.\nConvert to u <code>(L\\*, u\\*, v\\*, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, value, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, l, alpha)</code> tuple.\nConvert to a <code>(L\\*, a\\*, b\\*, alpha)</code> tuple.\nConvert to a <code>(lightness, colorfulness, hue, alpha)</code> tuple.\nConvert to a <code>(L, a, b, alpha)</code> tuple.\nConvert to a <code>(brightness, colorfulness, hue, alpha)</code> tuple.\nConvert to a <code>(L\\*, C\\*uv, h°uv, alpha)</code> tuple.\nConvert to a <code>(lightness, saturation, hue, alpha)</code> tuple.\nConvert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, lightness, alpha)</code> tuple.\nConvert to a <code>(L\\*, C\\*, h°, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, value, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, lightness, alpha)</code> tuple.\nConvert to a <code>(brightness, chroma, hue, alpha)</code> tuple.\nConvert to a <code>(luma, alpha)</code> tuple.\nConvert a linear color to a different encoding with …\nConvert a linear color to a different encoding with …\nConvert into another component type.\nConvert into another component type.\nConvert into another component type.\nConvert into another component type.\nConvert into another component type.\nConvert into another component type.\nConvert the LMSA components into other number types.\nConvert the RGBA components into other number types.\nConvert into another component type.\nReconstruct a full set of CIE CAM16 attributes with …\nReconstruct a full set of CIE CAM16 attributes with …\nReconstruct a full set of CIE CAM16 attributes with …\nReconstruct a full set of CIE CAM16 attributes with …\nReconstruct a full set of CIE CAM16 attributes with …\nReconstruct a full set of CIE CAM16 attributes with …\nConvert the color to linear RGB with transparency.\nConvert the color to linear luminance with transparency.\nConvert to a packed <code>u16</code> with with a specific component …\nConvert to a packed <code>u32</code> with with specifiable component …\nConstruct an XYZ color with transparency, from these CIE …\nConstruct an XYZ color with transparency, from these CIE …\nConstruct an XYZ color with transparency, from these CIE …\nConstruct an XYZ color with transparency, from these CIE …\nConstruct an XYZ color with transparency, from these CIE …\nConstruct an XYZ color with transparency, from these CIE …\nConstruct an XYZ color with transparency, that matches …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nReturn the <code>alpha</code> value maximum.\nReturn the <code>alpha</code> value minimum.\nCreate a CIE Yxy color with transparency.\nCreate a CIE L*u*v* color with transparency.\nCreate a CIE L*C*uv h°uv color with transparency.\nCreate an Oklch color with transparency.\nCreate a partial CIE CAM16 color with transparency.\nCreate a partial CIE CAM16 color with transparency.\nCreate a partial CIE CAM16 color with transparency.\nCreate an <code>Okhsl</code> color with transparency.\nCreate a CIE L*a*b* with transparency.\nCreate a luminance color with transparency.\nCreate a CIE XYZ color with transparency.\nCreate an HSV color with transparency.\nCreate an Oklab color with transparency.\nCreate a partial CIE CAM16 color with transparency.\nCreate a CAM16-UCS J’ M’ h’ color with transparency.\nCreate an <code>Okhwb</code> color with transparency.\nCreate an RGBA color.\nCreate a partial CIE CAM16 color with transparency.\nCreate an HSL color with transparency.\nCreate a partial CIE CAM16 color with transparency.\nCreate an HSLuv color with transparency.\nCreate an HWB color with transparency.\nCreate a CIE L*C*h° color with transparency.\nCreate an LMSA color.\nCreate a CAM16-UCS J’ a’ b’ color with transparency.\nCreate an <code>Okhsv</code> color with transparency.\nCreate a CAM16-UCS J’ M’ h’ color with transparency. …\nCreate a partial CIE CAM16 color with transparency. This …\nCreate a partial CIE CAM16 color with transparency. This …\nCreate an HSV color with transparency. This is the same as …\nCreate a CIE L*C*uv h°uv color with transparency. This is …\nCreate an <code>Oklcha</code> color. This is the same as <code>Oklcha::new</code> …\nCreate a partial CIE CAM16 color with transparency. This …\nCreate a CIE L*C*h° color with transparency. This is the …\nCreate an HSLuv color with transparency. This is the same …\nCreate an <code>Okhsla</code> color. This is the same as <code>Okhsla::new</code> …\nCreate a partial CIE CAM16 color with transparency. This …\nCreate a partial CIE CAM16 color with transparency. This …\nCreate an <code>Okhsva</code> color. This is the same as <code>Okhsva::new</code> …\nCreate an HSL color with transparency. This is the same as …\nCreate an <code>Okhwba</code> color. This is the same as <code>Okhwba::new</code> …\nCreate an HWB color with transparency. This is the same as …\nCreate a partial CIE CAM16 color with transparency. This …\nCreate an sRGB HWB color with transparency. This method …\nCreate an sRGB HSV color with transparency. This method …\nCreate an sRGB HSL color with transparency. This method …\nCreate an sRGB HWB color with transparency. This is the …\nCreate an sRGB HSV color with transparency. This is the …\nCreate an sRGB HSL color with transparency. This is the …\nTransforms the color into a fully opaque color with a …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nAlpha mask the color by its transparency.\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nUpdate this color with new values.\nSplits the color into separate color and transparency …\nTransforms the color into a fully transparent color. If …\nTransforms the color into a transparent color with the …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nChanges the meta type without changing the color value.\nChanges the reference white point without changing the …\nChanges the reference white point without changing the …\nRemoves the transparency from the color. If <code>Self::Color</code> has\nAngular equality, where 0 degrees and 360 degrees are …\nPerforms value-to-value conversion between angle types. …\nRepresents types that can express a full rotation (i.e. …\nRepresents types that can express half of a rotation (i.e. …\nPerforms value-to-value conversion between angle types. …\nAngle values that are real numbers and can represent both …\nAngle types that can represent the full circle using …\nAngle types that can represent the full circle as positive …\nCheck if <code>self</code> and <code>other</code> represent the same angle on a …\nConsider <code>self</code> to be degrees and convert it to radians.\nPerforms a conversion from <code>angle</code>.\nReturn a value that represents a full rotation (i.e. 360 …\nReturn a value that represents half of a rotation (i.e. …\nPerforms a conversion into <code>T</code>.\nNormalize <code>self</code> to a range corresponding to -180 to 180 …\nNormalize <code>self</code> to a range corresponding to 0 to 360 …\nConsider <code>self</code> to be radians and convert it to degrees.\nAdd the source and destination, according to …\nA trait for different ways of mixing colors together.\nA trait for custom blend functions.\nBlending with a custom blend function.\nThe base color type of <code>Self</code>.\nThe Porter Duff composition operators, as described by W3C.\nThe destination alpha.\nThe destination color, or alpha.\nA blending equation.\nA pair of blending equations and corresponding parameters.\nCreate a color where each component is the largest of each …\nCreate a color where each component is the smallest of …\nA simple 1.\nOne minus the destination alpha.\nOne minus the destination color, or alpha.\nOne minus the source alpha.\nOne minus the source color, or alpha.\nA blending parameter.\nA pair of source and destination parameters.\nPremultiplied alpha wrapper.\nAlpha masking and unmasking.\nSubtract the source from the destination, according to …\nThe color’s component type.\nThe source alpha.\nThe source color, or alpha.\nSubtract the destination from the source, according to …\nA simple 0.\nThe transparency component. 0.0 is fully transparent and …\nThe equation for the alpha component.\nThe parameters for the alpha component.\nApply this blend function to a pair of colors.\nPlace <code>self</code> over only the visible parts of <code>other</code>.\nBlend self, as the source color, with <code>destination</code>, using …\nDarken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …\nThe premultiplied color components (…\nThe equation for the color components.\nThe parameters for the color components.\nReturn the darkest parts of <code>self</code> and <code>other</code>.\nThe destination parameter.\nReturn the absolute difference between <code>self</code> and <code>other</code>. It…\nLighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …\nSimilar to <code>difference</code>, but appears to result in a lower …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a pair of blending equations, where all the …\nCreate a pair of additive blending equations with the …\nMultiply <code>self</code> or <code>other</code> if other is dark, or screen them if …\nResults in the parts of <code>self</code> that overlaps the visible …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the lightest parts of <code>self</code> and <code>other</code>.\nMultiply <code>self</code> with <code>other</code>. This uses the alpha component to …\nAlpha mask <code>color</code> with <code>alpha</code>.\nCreate an opaque alpha masked color.\nResults in the parts of <code>self</code> that lies outside the visible …\nPlace <code>self</code> over <code>other</code>. This is the good old common alpha …\nMultiply <code>self</code> or <code>other</code> if other is dark, or screen them if …\nAdd <code>self</code> and <code>other</code>. This uses the alpha component to …\nAlpha mask the color.\nMake a color which is at least as light as <code>self</code> or <code>other</code>.\nLighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it’…\nThe source parameter.\nAlpha unmask the color, resulting in a color and …\nAlpha unmask the color.\nResults in either <code>self</code> or <code>other</code>, where they do not overlap.\nA helper trait that collects bit traits under one name.\nBasic methods for boolean masks.\nAssociates a Boolean type to the implementing type.\nLike <code>Select</code>, but can avoid evaluating the input.\nThe mask type to use for selecting <code>Self</code> values.\nMakes a mask bale to select between two values.\nCreate a new mask where each lane is set to <code>value</code>.\nChecks if all lanes in the mask are <code>false</code>.\nChecks if all lanes in the mask are <code>true</code>.\nSelect lanes from the output of <code>a</code> when corresponding lanes …\nSelect lanes from <code>a</code> when corresponding lanes in <code>self</code> are …\nUses luminance levels and surround conditions to calculate …\nRepresents a surface color, such as a print on a 20% …\nPre-calculated variables for CAM16, that only depend on …\nThe CIE CAM16 color appearance model.\nA trait for converting into a CAM16 color type from <code>C</code> …\nA trait for converting from a CAM16 color type into <code>C</code> …\nPartial CIE CAM16, with lightness and chroma.\nPartial CIE CAM16 with lightness, chroma, and an alpha …\nPartial CIE CAM16, with lightness and colorfulness.\nPartial CIE CAM16 with lightness, colorfulness, and an …\nPartial CIE CAM16, with lightness and saturation.\nPartial CIE CAM16 with lightness, saturation, and an alpha …\nPartial CIE CAM16, with brightness and chroma.\nPartial CIE CAM16 with brightness, chroma, and an alpha …\nPartial CIE CAM16, with brightness and colorfulness.\nPartial CIE CAM16 with brightness, colorfulness, and an …\nPartial CIE CAM16, with brightness and saturation.\nPartial CIE CAM16 with brightness, saturation, and an …\nThe Cartesian form of CAM16-UCS, or J’ a’ b’.\nAn iterator for <code>Cam16UcsJab</code> values.\nCartesian CAM16-UCS with an alpha component.\nThe polar form of CAM16-UCS, or J’M’h’.\nAn iterator for <code>Cam16UcsJmh</code> values.\nPolar CAM16-UCS with an alpha component.\nCIE CAM16 with an alpha component.\nA value between <code>0.0</code> and <code>1.0</code>, where <code>0.0</code> represents no …\nRepresents a dark room, such as a movie theatre. …\nRepresents a dimly lit room with a bright TV or monitor. …\nThe degree of discounting of (or adaptation to) the …\nA trait for converting from a CAM16 color type <code>C</code> without …\nA trait for converting into a CAM16 color type <code>C</code> without …\nParameters for CAM16 that describe the viewing conditions.\nAny custom value from 0% to 20%. Any value outside that …\nThe number type that’s used in <code>parameters</code> when …\nThe number type that’s used in <code>parameters</code> when …\nThe number type that’s used in <code>parameters</code> when …\nThe number type that’s used in <code>parameters</code> when …\nRepresents a static white point in <code>Parameters</code>, as opposed …\nThe static representation of this white point, or …\nA description of the peripheral area.\nSamples colors uniformly.\nSamples colors uniformly.\nA trait for types that can be used as white point …\nThe redness/greenness (a’) of the color.\nThe average luminance of the environment (test adapting …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nBorrow this color’s components as shared references.\nThe yellowness/blueness (b’) of the color.\nThe luminance factor of the background (<em>Yb</em>), on a scale …\nPre-bakes the parameters to avoid repeating parts of the …\nThe brightness (Q) of the color.\nThe brightness (Q) of the color.\nThe brightness (Q) of the color.\nThe brightness (Q) of the color.\nConverts <code>color</code> into <code>Self</code>, using the provided parameters.\nConverts <code>self</code> into <code>C</code>, using the provided parameters.\nPartial CIE CAM16, with lightness and chroma, and helper …\nPartial CIE CAM16, with lightness and colorfulness, and …\nPartial CIE CAM16, with lightness and saturation, and …\nPartial CIE CAM16, with brightness and chroma, and helper …\nPartial CIE CAM16, with brightness and colorfulness, and …\nPartial CIE CAM16, with brightness and saturation, and …\nThe chroma (C) of the color.\nThe chroma (C) of the color.\nThe chroma (C) of the color.\nClear the component vectors. See <code>Vec::clear</code> for details.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe colorfulness (M) of the color.\nThe colorfulness (M’) of the color.\nThe colorfulness (M) of the color.\nThe colorfulness (M) of the color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nCreates a new set of parameters with a dynamic white point …\nCreates a new set of parameters with a static white point …\nThe degree of discounting of (or adaptation to) the …\nReturn an iterator that moves colors out of the specified …\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>cam16</code> into <code>Self</code>, using the provided parameters.\nConvert from a <code>(J&#39;, a&#39;, b&#39;)</code> tuple.\nConvert from a <code>(J&#39;, M&#39;, h&#39;)</code> tuple.\nDerive CIE CAM16 attributes for the provided color, under …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nThe hue (h’) of the color.\nThe hue (h) of the color.\nThe hue (h) of the color.\nThe hue (h) of the color.\nThe hue (h) of the color.\nThe hue (h) of the color.\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into <code>C</code>, using the provided parameters.\nConvert to a <code>(J&#39;, a&#39;, b&#39;)</code> tuple.\nConvert to a <code>(J&#39;, M&#39;, h&#39;)</code> tuple.\nReturns the XYZ value for this white point.\nConstruct an XYZ color that matches these CIE CAM16 …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nReturn an iterator that allows modifying the colors in the …\nThe lightness (J) of the color.\nThe lightness (J’) of the color.\nThe lightness (J’) of the color.\nThe lightness (J) of the color.\nThe lightness (J) of the color.\nThe lightness (J) of the color.\nReturn the <code>lightness</code> value maximum.\nReturn the <code>lightness</code> value maximum.\nReturn an <code>a</code> value maximum that includes the sRGB gamut.\nReturn a <code>b</code> value maximum that includes the sRGB gamut.\nReturn a <code>colorfulness</code> value maximum that includes the sRGB …\nReturn the <code>colorfulness</code> value minimum.\nReturn the <code>lightness</code> value minimum.\nReturn the <code>lightness</code> value minimum.\nReturn an <code>a</code> value minimum that includes the sRGB gamut.\nReturn a <code>b</code> value minimum that includes the sRGB gamut.\nCreate a CAM16-UCS J’ a’ b’ color.\nCreate a CAM16-UCS J’ M’ h’ color.\nCreate a CAM16-UCS J’ M’ h’ color. This is the same …\nPop a color’s components from the component vectors. See …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nPush an additional color’s components onto the component …\nThe saturation (s) of the color.\nThe saturation (s) of the color.\nThe saturation (s) of the color.\nUpdate this color with new values.\nUpdate this color with new values.\nA description of the peripheral area, with a value from 0% …\nWhite point of the test illuminant, <em>Xw</em> <em>Yw</em> <em>Zw</em>. <em>Yw</em> should be …\nCreate a struct of vectors with a minimum capacity. See …\nCreate a struct of vectors with a minimum capacity. See …\nPartial CIE CAM16, with lightness and chroma.\nAn iterator for <code>Cam16Jch</code> values.\nBorrow this color’s components as shared references.\nThe chroma (C) of the color.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(lightness, chroma, hue)</code> tuple.\nCreate a partial set of CIE CAM16 attributes.\nDerive partial CIE CAM16 attributes for the provided …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(lightness, chroma, hue)</code> tuple.\nReconstruct a full set of CIE CAM16 attributes, using the …\nConstruct an XYZ color from these CIE CAM16 attributes, …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nThe lightness (J) of the color.\nCreate a partial CIE CAM16 color.\nCreate a partial CIE CAM16 color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nPartial CIE CAM16, with lightness and colorfulness.\nAn iterator for <code>Cam16Jmh</code> values.\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe colorfulness (M) of the color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(lightness, colorfulness, hue)</code> tuple.\nCreate a partial set of CIE CAM16 attributes.\nDerive partial CIE CAM16 attributes for the provided …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(lightness, colorfulness, hue)</code> tuple.\nReconstruct a full set of CIE CAM16 attributes, using the …\nConstruct an XYZ color from these CIE CAM16 attributes, …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nThe lightness (J) of the color.\nCreate a partial CIE CAM16 color.\nCreate a partial CIE CAM16 color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nPartial CIE CAM16, with lightness and saturation.\nAn iterator for <code>Cam16Jsh</code> values.\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(lightness, saturation, hue)</code> tuple.\nCreate a partial set of CIE CAM16 attributes.\nDerive partial CIE CAM16 attributes for the provided …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(lightness, saturation, hue)</code> tuple.\nReconstruct a full set of CIE CAM16 attributes, using the …\nConstruct an XYZ color from these CIE CAM16 attributes, …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nThe lightness (J) of the color.\nCreate a partial CIE CAM16 color.\nCreate a partial CIE CAM16 color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe saturation (s) of the color.\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nPartial CIE CAM16, with brightness and chroma.\nAn iterator for <code>Cam16Qch</code> values.\nBorrow this color’s components as shared references.\nThe brightness (Q) of the color.\nThe chroma (C) of the color.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(brightness, chroma, hue)</code> tuple.\nCreate a partial set of CIE CAM16 attributes.\nDerive partial CIE CAM16 attributes for the provided …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(brightness, chroma, hue)</code> tuple.\nReconstruct a full set of CIE CAM16 attributes, using the …\nConstruct an XYZ color from these CIE CAM16 attributes, …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nCreate a partial CIE CAM16 color.\nCreate a partial CIE CAM16 color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nPartial CIE CAM16, with brightness and colorfulness.\nAn iterator for <code>Cam16Qmh</code> values.\nBorrow this color’s components as shared references.\nThe brightness (Q) of the color.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe colorfulness (M) of the color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(brightness, colorfulness, hue)</code> tuple.\nCreate a partial set of CIE CAM16 attributes.\nDerive partial CIE CAM16 attributes for the provided …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(brightness, colorfulness, hue)</code> tuple.\nReconstruct a full set of CIE CAM16 attributes, using the …\nConstruct an XYZ color from these CIE CAM16 attributes, …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nCreate a partial CIE CAM16 color.\nCreate a partial CIE CAM16 color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nPartial CIE CAM16, with brightness and saturation.\nAn iterator for <code>Cam16Qsh</code> values.\nBorrow this color’s components as shared references.\nThe brightness (Q) of the color.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(brightness, saturation, hue)</code> tuple.\nCreate a partial set of CIE CAM16 attributes.\nDerive partial CIE CAM16 attributes for the provided …\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue (h) of the color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(brightness, saturation, hue)</code> tuple.\nReconstruct a full set of CIE CAM16 attributes, using the …\nConstruct an XYZ color from these CIE CAM16 attributes, …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nCreate a partial CIE CAM16 color.\nCreate a partial CIE CAM16 color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe saturation (s) of the color.\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nThe output type of a cast to an array.\nMarker trait for types that can be represented as a fixed …\nTrait for casting a reference to collection of arrays into …\nTrait for casting a mutable reference to collection of …\nTrait for casting a collection of arrays from a collection …\nTrait for casting a collection of arrays into a collection …\nTrait for casting a reference to a collection of colors …\nTrait for casting a mutable reference to a collection of …\nTrait for casting a reference to a collection of colors …\nTrait for casting a mutable reference to a collection of …\nTrait for casting a reference to a collection of colors …\nTrait for casting a mutable reference to a collection of …\nThe error type returned when casting a boxed slice of …\nThe type of error returned when the capacity of a <code>Vec</code> didn…\nPacks and unpacks color types with some component order.\nTrait for casting a reference to collection of color …\nTrait for casting a mutable reference to collection of …\nTrait for casting a collection of color components into a …\nTrait for casting a collection of color components from a …\nThe error for when <code>try_components_as</code> fails to cast.\nThe error for when <code>try_components_as_mut</code> fails to cast.\nThe error for when <code>try_from_components</code> fails to cast.\nThe error for when <code>try_into_colors</code> fails to cast.\nTrait for casting a collection of colors from a collection …\nTrait for casting a collection of colors from a collection …\nTrait for casting a collection of colors from a collection …\nTrait for casting a collection of colors into a collection …\nTrait for casting a collection of colors into a collection …\nTrait for casting a collection of colors into a collection …\nThe type of error returned when the length of a <code>Vec</code> didn’…\nA color packed into a compact format, such as an unsigned …\nThe error type returned when casting a slice of components …\nTrait for trying to cast a reference to collection of …\nTrait for trying to cast a mutable reference to collection …\nTrait for trying to cast a collection of color components …\nTrait for trying to cast a collection of colors from a …\nAn unsigned integer with the same size as <code>Self</code>.\nMarker trait for types that can be represented as an …\nTrait for casting a reference to a collection of unsigned …\nTrait for casting a mutable reference to a collection of …\nTrait for casting a collection of unsigned integers from a …\nTrait for casting a collection of unsigned integers into a …\nThe error type returned when casting a <code>Vec</code> of components …\nThe type of error that is returned when casting a <code>Vec</code> of …\nCast this collection of arrays into a collection of colors.\nCast this collection of arrays into a mutable collection …\nCast a collection of colors into a collection of arrays.\nCast this collection of arrays into a collection of colors.\nCast this collection of colors into a collection of arrays.\nCast this collection of colors into a mutable collection …\nCast this collection of colors into a collection of color …\nCast this collection of colors into a mutable collection …\nCast this collection of colors into a collection of …\nCast this collection of colors into a mutable collection …\nThe channel order for the color components in the packed …\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nCast this collection of color components into a reference …\nCast this collection of color components into a mutable …\nCast a collection of colors into a collection of color …\nCast this collection of color components into a collection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCast from an array to a color type.\nCast from an array of arrays to an array of colors.\nCast from a boxed array to a boxed color type.\nCast from a mutable array reference to a mutable color …\nCast from an array reference to a color type reference.\nCast from a slice of arrays to a slice of colors.\nCast from a boxed slice of arrays to a boxed slice of …\nCast from a mutable slice of arrays to a mutable slice of …\nCast from a <code>Vec</code> of arrays to a <code>Vec</code> of colors.\nCast a collection of arrays into an collection of colors.\nCast from an array of color components to an array of …\nThe same as <code>try_from_component_slice</code> but panics on error.\nThe same as <code>try_from_component_slice_box</code> but panics on …\nThe same as <code>try_from_component_slice_mut</code> but panics on …\nThe same as <code>try_from_component_vec</code> but panics on error.\nCast a collection of color components into an collection …\nCast from an unsigned integer to a color type.\nCast from an array of unsigned integers to an array of …\nCast from a mutable unsigned integer reference to a …\nCast from an unsigned integer reference to a color type …\nCast from a slice of unsigned integers to a slice of …\nCast from a boxed slice of unsigned integers to a boxed …\nCast from a mutable slice of unsigned integers to a …\nCast from a <code>Vec</code> of unsigned integers to a <code>Vec</code> of colors.\nCast a collection of unsigned integers into an collection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCast from a color type to an array.\nCast from an array of colors to an array of arrays.\nCast from a boxed color type to a boxed array.\nCast from a mutable color type reference to a mutable …\nCast from a color type reference to an array reference.\nCast from a slice of colors to a slice of arrays.\nCast from a boxed slice of colors to a boxed slice of …\nCast from a mutable slice of colors to a mutable slice of …\nCast from a <code>Vec</code> of colors to a <code>Vec</code> of arrays.\nCast this collection of colors into a collection of arrays.\nCast from an array of colors to an array of color …\nCast from a slice of colors to a slice of color components.\nCast from a boxed slice of colors to a boxed slice of …\nCast from a slice of colors to a slice of color components.\nCast from a <code>Vec</code> of colors to a <code>Vec</code> of color components.\nCast this collection of colors into a collection of color …\nCast from a color type to an unsigned integer.\nCast from an array of colors to an array of unsigned …\nCast from a mutable color type reference to a mutable …\nCast from a color type reference to an unsigned integer …\nCast from a slice of colors to a slice of unsigned …\nCast from a boxed slice of colors to a boxed slice of …\nCast from a mutable slice of colors to a mutable slice of …\nCast from a <code>Vec</code> of colors to a <code>Vec</code> of unsigned integers.\nCast this collection of colors into a collection of …\nThe type of error that occurred.\nMap values of color A to values of color B without …\nMap values of color A to values of color B without …\nCombine the components of a color into the packed format.\nTransform a color value into a packed memory …\nTry to cast this collection of color components into a …\nTry to cast this collection of color components into a …\nTry to cast this collection of color components into a …\nCast from a slice of color components to a slice of colors.\nCast from a boxed slice of color components to a boxed …\nCast from a mutable slice of color components to a slice …\nCast from a <code>Vec</code> of color components to a <code>Vec</code> of colors.\nTry to cast a collection of color components into an …\nCast this collection of unsigned integers into a …\nCast this collection of unsigned integers into a mutable …\nCast a collection of colors into a collection of unsigned …\nCast this collection of unsigned integers into a …\nSplit the packed color into its separate components.\nTransform a packed color into a regular color value.\nThe original values.\nThe original values.\nTrait to convert color from one reference white point to …\nA trait for unchecked conversion of one color from another …\nTrait to convert color with one reference white point into …\nA trait for unchecked conversion of one color into another …\nBradford chromatic adaptation method\nHolds the matrix coefficients for the chromatic adaptation …\nChromatic adaptation methods implemented in the library\nThe number type that’s used as the color’s components.\nThe number type that’s used as the color’s components.\nGenerates a conversion matrix to convert the Xyz …\nVonKries chromatic adaptation method\nXyzScaling chromatic adaptation method\nConvert the source color to the destination color using …\nAdapt a color of type <code>T</code> into a color of type <code>Self</code>, using …\nAdapt a color of type <code>T</code> into a color of type <code>Self</code>, using …\nConvert the source color to the destination color using …\nConvert the source color to the destination color using …\nAdapt a color of type <code>Self</code> into a color of type <code>T</code>, using …\nAdapt a color of type <code>Self</code> into a color of type <code>T</code>, using …\nConvert the source color to the destination color using …\nConstruct a one-step chromatic adaptation matrix.\nConstruct a diagonal matrix for full adaptation of <code>Lms</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a 3x3 transformation matrix to convert color …\nGet the cone response functions for the chromatic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n3x3 matrix for the inverse of the cone response domains\n3x3 matrix for the cone response domains\nCalculate the CIEDE2000 Δ<em>E*</em> (Delta E) color difference …\nA trait for calculating the color difference between two …\nCalculate the Δ<em>E</em> color difference between two colors.\nCalculate the distance between two colors as if they were …\nCalculate a combination of Euclidean and …\nCalculate the CIEDE2000 Δ<em>E’</em> (improved IEDE2000 Δ<em>E*</em>) …\nCalculate the Δ<em>E’</em> (improved Δ<em>E</em>) color difference …\nThe type of the calculated color difference.\nThe type for the Δ<em>E*</em> (Delta E).\nThe type for the distance value.\nThe scalar type used for luminance and contrast.\nThe type for the distance value.\nThe type for the distance value.\nCalculate and check the WCAG 2.1 relative contrast and …\nCalculate the Δ<em>E</em> color difference metric for <code>self</code> and …\nCalculate the CIEDE2000 Δ<em>E*</em> (Delta E) color difference …\nCalculate the Euclidean distance from <code>self</code> to <code>other</code>.\nCalculate the squared Euclidean distance from <code>self</code> to <code>other</code>…\nReturn the difference or distance between two colors.\nVerify the contrast between two colors satisfies SC 1.4.6 …\nVerify the contrast between two colors satisfies SC 1.4.6. …\nVerify the contrast between two colors satisfies SC 1.4.11 …\nVerify the contrast between two colors satisfies SC 1.4.3 …\nVerify the contrast between two colors satisfies SC 1.4.3. …\nCalculate the hybrid distance between <code>self</code> and <code>other</code>.\nCalculate the Δ<em>E’</em> (improved Δ<em>E</em>) color difference …\nCalculate the CIEDE2000 Δ<em>E’</em> (improved IEDE2000 Δ<em>E*</em>) …\nReturns the WCAG 2.1 relative luminance contrast between …\nReturns the WCAG 2.1 relative luminance of <code>self</code>.\nRepresents the analogous color scheme on a 12 color wheel.\nRepresents the complementary color scheme.\nRepresents the split complementary color scheme.\nRepresents the tetradic, or square, color scheme.\nRepresents the triadic color scheme.\nReturn the two additional colors of an analogous color …\nReturn the next two analogous colors, after the colors …\nReturn the complementary color of <code>self</code>.\nReturn the two split complementary colors of <code>self</code>.\nReturn the three additional colors of a tetradic color …\nReturn the two additional colors of a triadic color scheme.\nRepresents types that can convert a value from one type to …\nRepresents types that can convert a value from one type to …\nA trait for converting one color from another, in a …\nTemporarily convert colors in place.\nA scope guard that restores the guarded colors to their …\nA trait for unchecked conversion of one color from another.\nTemporarily convert colors in place, without clamping.\nA scope guard that restores the guarded colors to their …\nA trait for converting a color into another, in a possibly …\nTemporarily convert colors in place. The <code>Into</code> counterpart …\nA trait for unchecked conversion of a color into another.\nTemporarily convert colors in place. The <code>Into</code> counterpart …\nA statically typed 3x3 conversion matrix.\nThe error type for a color conversion that converted a …\nA trait for fallible conversion of one color from another.\nA trait for fallible conversion of a color into another.\nConsume this error and return the wrapped color\nConvert an input value of type <code>I</code> to a value of type <code>O</code>.\nConvert an input value of type <code>I</code> to a value of type <code>O</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a conversion matrix from a plain array.\nConvert from T with values clamped to the color defined …\nTemporarily convert from another color type in place.\nConvert from T. The resulting color might be invalid in …\nTemporarily convert from another color type in place, …\nProduce an identity matrix, which leaves the components …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the inner array.\nReplace this guard with a guard that clamps the colors …\nConvert into T with values clamped to the color defined …\nTemporarily convert to another color type in place.\nConvert into T. The resulting color might be invalid in …\nTemporarily convert to another color type in place, …\nReplace this guard with a guard that does not clamp the …\nInvert the matrix to create a reversed conversion.\nImmediately restore the colors to their original type.\nImmediately restore the colors to their original type.\nProduce a scale matrix, which scales each component …\nChain another matrix after this one.\nConvert the colors to another type and replace this guard.\nConvert the colors to another type and replace this guard.\nConvert the colors to another type, without clamping, and …\nConvert the colors to another type, without clamping, and …\nConvert from T, returning ok if the color is inside of its …\nConvert into T, returning ok if the color is inside of its …\nA transfer function from linear space.\nA transfer function to linear space.\nThe Adobe RGB (1998) standard.\nConvert the color component <code>linear</code> from linear space.\nGamma encoding.\nConvert the color component <code>encoded</code> into linear space.\nLinear encoding\nThe P3 color space(s) and standards.\nThe ProPhoto RGB standard.\nThe ITU-R Recommendation BT.2020 (Rec. 2020) and BT.709 …\nThe sRGB standard.\nThe Adobe RGB (1998) (a.k.a. opRGB) color space and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents <code>2.2f64</code>.\nGamma encoding.\nThe transfer function for gamma encoded colors.\nA type level float constant.\nThe represented number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA generic standard with linear components.\nLinear color component encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe theatrical DCI-P3 standard.\nThe Canon DCI-P3+ color space and standard.\nThe Display P3 standard.\nA gamma 2.6 transfer function used by some P3 variants\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ProPhoto RGB standard and color space with gamma 2.2 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Rec. 2020 standard, color space, and transfer function.\nThe Rec. 709 standard, color space, and transfer function.\nThe opto-electronic transfer function used in standard …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe sRGB standard, color space, and transfer function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHSL color space.\nLinear HSL with an alpha component. See the <code>Hsla</code> …\nAn iterator for <code>Hsl</code> values.\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(hue, saturation, lightness)</code> tuple.\nConvert from another component type.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees. Decides if it’s red, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(hue, saturation, lightness)</code> tuple.\nConvert into another component type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nDecides how light the color will look. 0.0 will be black, …\nReturn the <code>lightness</code> value maximum.\nReturn the <code>saturation</code> value maximum.\nReturn the <code>lightness</code> value minimum.\nReturn the <code>saturation</code> value minimum.\nCreate an HSL color.\nCreate an HSL color. This is the same as <code>Hsl::new</code> without …\nCreate an sRGB HSL color. This method can be used instead …\nCreate an sRGB HSL color. This is the same as <code>Hsl::new_srgb</code>…\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe colorfulness of the color. 0.0 gives gray scale colors …\nUpdate this color with new values.\nThe white point and RGB primaries this color is adapted …\nCreate a struct of vectors with a minimum capacity. See …\nHSLuv color space.\nHSLuv with an alpha component. See the <code>Hsluva</code> …\nAn iterator for <code>Hsluv</code> values.\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(hue, saturation, l)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees. Decides if it’s red, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(hue, saturation, l)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nDecides how light the color will look. 0.0 will be black, …\nReturn the <code>l</code> value maximum.\nReturn the <code>saturation</code> value maximum.\nReturn the <code>l</code> value minimum.\nReturn the <code>saturation</code> value minimum.\nCreate an HSLuv color.\nCreate an HSLuv color. This is the same as <code>Hsluv::new</code> …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe colorfulness of the color, as a percentage of the …\nUpdate this color with new values.\nThe white point and RGB primaries this color is adapted …\nCreate a struct of vectors with a minimum capacity. See …\nHSV color space.\nLinear HSV with an alpha component. See the <code>Hsva</code> …\nAn iterator for <code>Hsv</code> values.\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(hue, saturation, value)</code> tuple.\nConvert from another component type.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees. Decides if it’s red, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(hue, saturation, value)</code> tuple.\nConvert into another component type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nReturn the <code>saturation</code> value maximum.\nReturn the <code>value</code> value maximum.\nReturn the <code>saturation</code> value minimum.\nReturn the <code>value</code> value minimum.\nCreate an HSV color.\nCreate an HSV color. This is the same as <code>Hsv::new</code> without …\nCreate an sRGB HSV color. This method can be used instead …\nCreate an sRGB HSV color. This is the same as <code>Hsv::new_srgb</code>…\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe colorfulness of the color. 0.0 gives gray scale colors …\nUpdate this color with new values.\nThe white point and RGB primaries this color is adapted …\nDecides how bright the color will look. 0.0 will be black, …\nCreate a struct of vectors with a minimum capacity. See …\nA hue type for the CAM16 color appearance model.\nIterator over <code>Cam16Hue</code> values.\nA hue type for the CIE L*a*b* family of color spaces.\nIterator over <code>LabHue</code> values.\nA hue type for the CIE L*u*v* family of color spaces.\nIterator over <code>LuvHue</code> values.\nA hue type for the Oklab color space.\nIterator over <code>OklabHue</code> values.\nA hue type for the RGB family of color spaces.\nIterator over <code>RgbHue</code> values.\nSample <code>Cam16Hue</code> uniformly.\nSample <code>LabHue</code> uniformly.\nSample <code>LuvHue</code> uniformly.\nSample <code>OklabHue</code> uniformly.\nSample <code>RgbHue</code> uniformly.\nBorrow this hue’s value as shared references.\nBorrow this hue’s value as shared references.\nBorrow this hue’s value as shared references.\nBorrow this hue’s value as shared references.\nBorrow this hue’s value as shared references.\nClear the hue vector. See <code>Vec::clear</code> for details.\nClear the hue vector. See <code>Vec::clear</code> for details.\nClear the hue vector. See <code>Vec::clear</code> for details.\nClear the hue vector. See <code>Vec::clear</code> for details.\nClear the hue vector. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, cloned version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nGet an owned, copied version of this hue.\nReturn an iterator that moves hues out of the specified …\nReturn an iterator that moves hues out of the specified …\nReturn an iterator that moves hues out of the specified …\nReturn an iterator that moves hues out of the specified …\nReturn an iterator that moves hues out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a hue from <code>a</code> and <code>b</code>, normalized to <code>[0°, 360°)</code>.\nReturns a hue from <code>a</code> and <code>b</code>, normalized to <code>[0°, 360°)</code>.\nReturns a hue from <code>a</code> and <code>b</code>, normalized to <code>[0°, 360°)</code>.\nReturns a hue from <code>a</code> and <code>b</code>, normalized to <code>[0°, 360°)</code>.\nReturns a hue from <code>a</code> and <code>b</code>, normalized to <code>[0°, 360°)</code>.\nCreate a new hue from degrees. This is an alias for <code>new</code>.\nCreate a new hue from degrees. This is an alias for <code>new</code>.\nCreate a new hue from degrees. This is an alias for <code>new</code>.\nCreate a new hue from degrees. This is an alias for <code>new</code>.\nCreate a new hue from degrees. This is an alias for <code>new</code>.\nConvert from another angle type.\nConvert from another angle type.\nConvert from another angle type.\nConvert from another angle type.\nConvert from another angle type.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nGet a hue, or slice of hues, with references to the values …\nGet a hue, or slice of hues, with references to the values …\nGet a hue, or slice of hues, with references to the values …\nGet a hue, or slice of hues, with references to the values …\nGet a hue, or slice of hues, with references to the values …\nGet a hue, or slice of hues, that allows modifying the …\nGet a hue, or slice of hues, that allows modifying the …\nGet a hue, or slice of hues, that allows modifying the …\nGet a hue, or slice of hues, that allows modifying the …\nGet a hue, or slice of hues, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>a</code> and <code>b</code> values for this hue, normalized to <code>[-1, 1]</code>.\nReturns <code>a</code> and <code>b</code> values for this hue, normalized to <code>[-1, 1]</code>.\nReturns <code>a</code> and <code>b</code> values for this hue, normalized to <code>[-1, 1]</code>.\nReturns <code>a</code> and <code>b</code> values for this hue, normalized to <code>[-1, 1]</code>.\nReturns <code>a</code> and <code>b</code> values for this hue, normalized to <code>[-1, 1]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nConvert into another angle type.\nConvert into another angle type.\nConvert into another angle type.\nConvert into another angle type.\nConvert into another angle type.\nGet the internal representation without normalizing or …\nGet the internal representation without normalizing or …\nGet the internal representation without normalizing or …\nGet the internal representation without normalizing or …\nGet the internal representation without normalizing or …\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nGet the internal representation as degrees, without …\nGet the internal representation as degrees, without …\nGet the internal representation as degrees, without …\nGet the internal representation as degrees, without …\nGet the internal representation as degrees, without …\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nReturn an iterator over the hues in the wrapped collection.\nReturn an iterator over the hues in the wrapped collection.\nReturn an iterator over the hues in the wrapped collection.\nReturn an iterator over the hues in the wrapped collection.\nReturn an iterator over the hues in the wrapped collection.\nReturn an iterator that allows modifying the hues in the …\nReturn an iterator that allows modifying the hues in the …\nReturn an iterator that allows modifying the hues in the …\nReturn an iterator that allows modifying the hues in the …\nReturn an iterator that allows modifying the hues in the …\nCreate a new hue, specified in the default unit for the …\nCreate a new hue, specified in the default unit for the …\nCreate a new hue, specified in the default unit for the …\nCreate a new hue, specified in the default unit for the …\nCreate a new hue, specified in the default unit for the …\nPop a hue from the hue vector. See <code>Vec::pop</code> for details.\nPop a hue from the hue vector. See <code>Vec::pop</code> for details.\nPop a hue from the hue vector. See <code>Vec::pop</code> for details.\nPop a hue from the hue vector. See <code>Vec::pop</code> for details.\nPop a hue from the hue vector. See <code>Vec::pop</code> for details.\nPush an additional hue onto the hue vector. See <code>Vec::push</code> …\nPush an additional hue onto the hue vector. See <code>Vec::push</code> …\nPush an additional hue onto the hue vector. See <code>Vec::push</code> …\nPush an additional hue onto the hue vector. See <code>Vec::push</code> …\nPush an additional hue onto the hue vector. See <code>Vec::push</code> …\nUpdate this hue with a new value.\nUpdate this hue with a new value.\nUpdate this hue with a new value.\nUpdate this hue with a new value.\nUpdate this hue with a new value.\nCreate a struct with a vector with a minimum capacity. See …\nCreate a struct with a vector with a minimum capacity. See …\nCreate a struct with a vector with a minimum capacity. See …\nCreate a struct with a vector with a minimum capacity. See …\nCreate a struct with a vector with a minimum capacity. See …\nHWB color space.\nLinear HWB with an alpha component. See the <code>Hwba</code> …\nAn iterator for <code>Hwb</code> values.\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nThe blackness of the color. It specifies the amount black …\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(hue, whiteness, blackness)</code> tuple.\nConvert from another component type.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees. Decides if it’s red, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(hue, whiteness, blackness)</code> tuple.\nConvert into another component type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nReturn the <code>blackness</code> value maximum.\nReturn the <code>whiteness</code> value maximum.\nReturn the <code>blackness</code> value minimum.\nReturn the <code>whiteness</code> value minimum.\nCreate an HWB color.\nCreate an HWB color. This is the same as <code>Hwb::new</code> without …\nCreate an sRGB HWB color. This method can be used instead …\nCreate an sRGB HWB color. This is the same as <code>Hwb::new_srgb</code>…\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point and RGB primaries this color is adapted …\nThe whiteness of the color. It specifies the amount white …\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Lab</code> values.\nThe CIE L*a*b* (CIELAB) color space.\nCIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …\nSamples colors uniformly.\na* goes from red at -128 to green at 127.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nb* goes from yellow at -128 to blue at 127.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(L\\*, a\\*, b\\*)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(L\\*, a\\*, b\\*)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nL* is the lightness of the color. 0.0 gives absolute black …\nReturn the <code>a</code> value maximum.\nReturn the <code>b</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>a</code> value minimum.\nReturn the <code>b</code> value minimum.\nReturn the <code>l</code> value minimum.\nCreate a CIE L*a*b* color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Lch</code> values.\nCIE L*C*h°, a polar version of CIE L*a*b*.\nCIE L*C*h° with an alpha component. See the <code>Lcha</code> …\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nC* is the colorfulness of the color. It’s similar to …\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(L\\*, C\\*, h°)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees. Decides if it’s red, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(L\\*, C\\*, h°)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nL* is the lightness of the color. 0.0 gives absolute black …\nReturn the <code>chroma</code> value maximum. This value does not cover …\nReturn the <code>chroma</code> extended maximum value. This value …\nReturn the <code>l</code> value maximum.\nReturn the <code>chroma</code> value minimum.\nReturn the <code>l</code> value minimum.\nCreate a CIE L*C*h° color.\nCreate a CIE L*C*h° color. This is the same as <code>Lch::new</code> …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Lchuv</code> values.\nCIE L*C*uv h°uv, a polar version of CIE L*u*v*.\nCIE L*C*uv h°uv with an alpha component. See the <code>Lchuva</code> …\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nC*uv is the colorfulness of the color. It’s similar to …\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(L\\*, C\\*uv, h°uv)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees. Decides if it’s red, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(L\\*, C\\*uv, h°uv)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nL* is the lightness of the color. 0.0 gives absolute black …\nReturn the <code>chroma</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>chroma</code> value minimum.\nReturn the <code>l</code> value minimum.\nCreate a CIE L*C*uv h°uv color.\nCreate a CIE L*C*uv h°uv color. This is the same as …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nLMS that uses the Bradford matrix.\nLMSA that uses the Bradford matrix.\nAn iterator for <code>Lms</code> values.\nGeneric LMS.\nGeneric LMS with an alpha component. See <code>Lmsa</code> …\nSamples colors uniformly.\nLMS that uses the von Kries matrix.\nLMSA that uses the von Kries matrix.\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nThe color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(long, medium, short)</code> tuple.\nConvert the LMS components from another number type.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(long, medium, short)</code> tuple.\nConvert the LMS components into another number type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nStimulus from long wavelengths, or red, or ρ. The typical …\nStimulus from long wavelengths, or red, or ρ. The typical …\nStimulus from long wavelengths, or red, or ρ. The typical …\nMatrix types and traits for <code>Lms</code>.\nProduce a conversion matrix from <code>Xyz</code> to <code>Lms</code>.\nStimulus from medium wavelengths, or green, or γ. The …\nStimulus from medium wavelengths, or green, or γ. The …\nStimulus from medium wavelengths, or green, or γ. The …\nType level meta information, such as reference white, or …\nType level meta information, such as reference white, or …\nType level meta information, such as reference white, or …\nReturn the <code>long</code> value minimum.\nReturn the <code>medium</code> value minimum.\nReturn the <code>short</code> value minimum.\nCreate a new LMS color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nStimulus from short wavelengths, or blue, or β. The …\nStimulus from short wavelengths, or blue, or β. The …\nStimulus from short wavelengths, or blue, or β. The …\nCreate a struct of vectors with a minimum capacity. See …\nChanges the meta type without changing the color value.\nRepresents Bradford’s spectrally sharpening matrix (MBFD…\nImplemented by meta types that contain an LMS matrix.\nThe LMS matrix meta type.\nProvides a matrix for converting from <code>Lms</code> to <code>Xyz</code>.\nRepresents a unit matrix, for a 1:1 conversion between XYZ …\nRepresents the matrix used with the von Kries transform …\nAdds an LMS matrix <code>Matrix</code> to another meta type <code>T</code>.\nProvides a matrix for converting from <code>Xyz</code> to <code>Lms</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an <code>Lms</code> to <code>Xyz</code> conversion matrix with elements of type <code>T</code>…\nGet an <code>Xyz</code> to <code>Lms</code> conversion matrix with elements of type <code>T</code>…\nGamma 2.2 encoded luminance.\nGamma 2.2 encoded luminance with an alpha component.\nAn iterator for <code>Luma</code> values.\nLinear luminance.\nLinear luminance with an alpha component.\nLuminance.\nA white point and a transfer function.\nLuminance with an alpha component. See the <code>Lumaa</code> …\nA packed representation of Luma+Alpha in AL order.\nA packed representation of Luma+Alpha in LA order.\nsRGB encoded luminance.\nsRGB encoded luminance with an alpha component.\nThe transfer function for the luminance component.\nThe white point of the color space.\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nThe channel order for the color components in the packed …\nThe channel order for the color components in the packed …\nChannel orders for packed Luma types.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(luma,)</code> tuple.\nConvert from linear luminance from a different encoding.\nConvert from another component type.\nConvert linear luminance to non-linear luminance.\nConvert from a packed <code>u16</code> with a specific component order.\nConvert from a packed <code>u16</code> with specifiable component order.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(luma,)</code> tuple.\nConvert a linear color to a different encoding.\nConvert into another component type.\nConvert the color to linear luminance.\nConvert to a packed <code>u16</code> with with a specific component …\nConvert to a packed <code>u16</code> with with specifiable component …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nReturn the <code>luma</code> value maximum.\nReturn the <code>luma</code> value minimum.\nCreate a luminance color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nCreate a struct of vectors with a minimum capacity. See …\nLuma+Alpha color packed in AL order.\nLuma+Alpha color packed in LA order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator for <code>Luv</code> values.\nThe CIE L*u*v* (CIELUV) color space.\nCIE L*u*v* (CIELUV) with an alpha component. See the <code>Luva</code> …\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(L\\*, u\\*, v\\*)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(L\\*, u\\*, v\\*)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nL* is the lightness of the color. 0.0 gives absolute black …\nReturn the <code>l</code> value maximum.\nReturn the <code>u</code> value maximum.\nReturn the <code>v</code> value maximum.\nReturn the <code>l</code> value minimum.\nReturn the <code>u</code> value minimum.\nReturn the <code>v</code> value minimum.\nCreate a CIE L*u*v* color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe range of valid u* varies depending on the values of L* …\nThe range of valid v* varies depending on the values of L* …\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nGet a SVG/CSS3 color by name. Can be toggled with the …\nMethod for getting the absolute value of a number.\nA helper trait that collects arithmetic traits under one …\nMethod for getting the cube root of a number.\nTrait for clamping a value.\nAssigning trait for clamping a value.\nMethods for calculating <code>e ^ x</code>,\nTrait for creating a vectorized value from a scalar value.\nConversion from an array of scalars to a vectorized value.\nMethods for calculating the lengths of a hypotenuse.\nConversion from a vectorized value to an array of scalars.\nMethods for checking if a number can be used as a divisor.\nTrait for getting the natural logarithm of <code>self</code>.\nMethods for getting the largest or smallest of two values.\nCombined multiplication and addition operation.\nCombined multiplication and subtraction operation.\nMethods for the value <code>1</code>.\nThe resulting type.\nThe resulting type.\nTrait for lanewise comparison of two values.\nMethod for raising a number by a real number exponent.\nMethod for raising a number by a signed integer exponent.\nMethod for raising a number by a n unsigned integer …\nNumbers that belong to the real number set. It’s both a …\nMethod for calculating <code>1 / x</code>.\nMethods for rounding numbers to integers.\nSaturating addition operation.\nSaturating subtraction operation.\nThe scalar type that is stored in each lane of <code>Self</code>. …\nTrait for getting a number that represents the sign of <code>self</code>…\nMethod for getting the square root of a number.\nTrigonometry methods and their inverses.\nMethods for the value <code>0</code>.\nReturns the absolute value of <code>self</code>.\nCompute the arccosine in radians of <code>self</code>.\nCompute the arcsine in radians of <code>self</code>.\nCompute the arctangent in radians of <code>self</code>.\nCompute the arctangent in radians of <code>self</code> (y) and <code>other</code> …\nReturns the cube root of <code>self</code>.\nReturn the smallest integer greater than or equal to <code>self</code>.\nClamp self to be within the range <code>[min, max]</code>.\nClamp self to be within the range <code>[min, max]</code>.\nClamp self to be within the range <code>(-∞, max]</code>.\nClamp self to be within the range <code>(-∞, max]</code>.\nClamp self to be within the range <code>[min, ∞)</code>.\nClamp self to be within the range <code>[min, ∞)</code>.\nCompute the cosine of <code>self</code> (in radians).\nCompares <code>self == other</code>.\nReturn <code>e ^ self</code>.\nReturn the largest integer less than or equal to <code>self</code>.\nCreates a vectorized value from an array of scalars.\nCreate a number from an <code>f64</code> value, mainly for converting …\nCreate a new vectorized value where each lane is <code>scalar</code>. …\nCompares <code>self &gt; other</code>.\nCompares <code>self &gt;= other</code>.\nReturns the length of the hypotenuse formed by <code>self</code> and …\nCreates an array of scalars from a vectorized value.\nReturn <code>true</code> if <code>self</code> can be used as a divisor in <code>x / self</code>.\nReturns the natural logarithm of <code>self</code>.\nCompares <code>self &lt; other</code>.\nCompares <code>self &lt;= other</code>.\nReturn the largest of <code>self</code> and <code>other</code>.\nReturn the smallest of <code>self</code> and <code>other</code>.\nReturn a pair of <code>self</code> and <code>other</code>, where the smallest is the …\nMultiplies self with <code>m</code> and add <code>a</code>, as in <code>(self * m) + a</code>.\nMultiplies self with <code>m</code> and subtract <code>s</code>, as in <code>(self * m) - s</code>…\nCompares <code>self != other</code>.\nCreate a new <code>1</code> value.\nReturn <code>self</code> raised to the power of <code>exp</code>.\nReturn <code>self</code> raised to the power of <code>exp</code>.\nReturn <code>self</code> raised to the power of <code>exp</code>.\nReturn <code>1 / self</code>.\nReturn the nearest integer to <code>self</code>. Round half-way cases …\nReturns the sum of <code>self</code> and <code>other</code>, but saturates instead …\nReturns the difference of <code>self</code> and <code>other</code>, but saturates …\nReturns a number that represents the sign of <code>self</code>. For …\nCompute the sine of <code>self</code> (in radians).\nSimultaneously compute the sine and cosine of <code>self</code> (in …\nReturns the square root of <code>self</code>.\nCompute the tangent of <code>self</code> (in radians).\nCreate a new <code>0</code> value.\nAn iterator for <code>Okhsl</code> values.\nA Hue/Saturation/Lightness representation of <code>Oklab</code> in the …\nOkhsl with an alpha component.\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(h, s, l)</code> tuple.\nConvert from another component type.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees of a circle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(h, s, l)</code> tuple.\nConvert into another component type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nThe relative luminance of the color, where\nReturn the <code>lightness</code> value maximum.\nReturn the <code>saturation</code> value maximum.\nReturn the <code>lightness</code> value minimum.\nReturn the <code>saturation</code> value minimum.\nCreate an Okhsl color.\nCreate an <code>Okhsl</code> color. This is the same as <code>Okhsl::new</code> …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe saturation (freedom of black or white) of the color.\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Okhsv</code> values.\nA Hue/Saturation/Value representation of <code>Oklab</code> in the <code>sRGB</code> …\nOkhsv with an alpha component. See the <code>Okhsva</code> …\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(h, s, v)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees of a circle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(h, s, v)</code> tuple.\nConvert into another component type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nReturn the <code>saturation</code> value maximum.\nReturn the <code>value</code> value maximum.\nReturn the <code>saturation</code> value minimum.\nReturn the <code>value</code> value minimum.\nCreate an <code>Okhsv</code> color.\nCreate an <code>Okhsv</code> color. This is the same as <code>Okhsv::new</code> …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nThe saturation (freedom of whitishness) of the color.\nUpdate this color with new values.\nThe monochromatic brightness of the color.\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Okhwb</code> values.\nA Hue/Whiteness/Blackness representation of <code>Oklab</code> in the …\nOkhwb with an alpha component. See the <code>Okhwba</code> …\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nThe amount of black, mixed in the pure hue, ranging from …\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(h, w, b)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nThe hue of the color, in degrees of a circle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(h, w, b)</code> tuple.\nConvert into another component type.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nReturn the <code>blackness</code> value maximum.\nReturn the <code>whiteness</code> value maximum.\nReturn the <code>blackness</code> value minimum.\nReturn the <code>whiteness</code> value minimum.\nCreate an <code>Okhwb</code> color.\nCreate an <code>Okhwb</code> color. This is the same as <code>Okhwb::new</code> …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe amount of white, mixed in the pure hue, ranging from …\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Oklab</code> values.\nThe Oklab color space.\nOklab with an alpha component.\nSamples colors uniformly.\n<code>a</code> changes the hue from reddish to greenish, when moving …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\n<code>b</code> changes the hue from yellowish to blueish, when moving …\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(L, a, b)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(L, a, b)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\n<code>l</code> is the lightness of the color. <code>0</code> gives absolute black …\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value minimum.\nCreate an Oklab color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nAn iterator for <code>Oklch</code> values.\nOklch, a polar version of Oklab.\nOklch with an alpha component. See the <code>Oklcha</code> …\nSamples colors uniformly.\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\n<code>chroma</code> is the colorfulness of the color. A color with …\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …")