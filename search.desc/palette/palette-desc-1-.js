searchState.loadedDescShard("palette", 1, "Returns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(L, C, h)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nh is the hue of the color, in degrees. Decides if it’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(L, C, h)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nL is the lightness of the color. 0 gives absolute black …\nReturn the <code>l</code> value maximum.\nReturn the <code>chroma</code> value minimum.\nReturn the <code>l</code> value minimum.\nCreate an <code>Oklch</code> color.\nCreate an <code>Oklch</code> color. This is the same as <code>Oklch::new</code> …\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nCreate a struct of vectors with a minimum capacity. See …\nNon-linear Adobe RGB.\nNon-linear Adobe RGB with an alpha component.\nNon-linear DCI-P3, an RGB format used for digital movie …\nNon-linear Canon DCI-P3+, an RGB format with a very wide …\nNon-linear Display P3, an RGB format used developed by …\nError type for parsing a string of hexadecimal characters …\nGamma 2.2 encoded sRGB.\nGamma 2.2 encoded sRGB with an alpha component.\nThe hex value was not in a valid 3 or 6 character format.\nAn iterator for <code>Rgb</code> values.\nLinear Adobe RGB.\nLinear Adobe RGB with an alpha component.\nLinear DCI-P3.\nLinear DCI-P3+.\nLinear Display P3.\nLinear ProPhoto RGB.\nLinear ProPhoto RGB with an alpha component.\nLinear Rec. 2020.\nLinear sRGB.\nLinear sRGB with an alpha component.\nA packed representation of RGBA in ABGR order.\nA packed representation of RGBA in ARGB order.\nA packed representation of RGBA in BGRA order.\nA packed representation of RGBA in RGBA order.\nAn error occurred while parsing the string into a valid …\nRepresents the red, green and blue primaries of an RGB …\nThe primaries of the RGB color space.\nNon-linear ProPhoto RGB, a wide color gamut RGB format.\nNon-linear ProPhoto RGB with an alpha component.\nNon-linear Rec. 2020, a wide color gamut RGB format.\nRec. 709.\nGeneric RGB.\nA set of primaries and a white point.\nAn RGB space and a transfer function.\nGeneric RGB with an alpha component. See the <code>Rgba</code> …\nThe hex value was not in a valid 4 or 8 character format.\nThe RGB color space.\nNon-linear sRGB, the most common RGB input/output format.\nNon-linear sRGB with an alpha component.\nThe transfer function for the color components.\nThe white point of the RGB color space.\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nPrimary blue.\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe channel order for the color components in the packed …\nThe channel order for the color components in the packed …\nThe channel order for the color components in the packed …\nThe channel order for the color components in the packed …\nChannel orders for packed RGBA types.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nThe color packed into a type <code>P</code>, such as <code>u32</code> or <code>[u8; 4]</code>.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(red, green, blue)</code> tuple.\nConvert linear RGB from a different encoding.\nConvert the RGB components from another number type.\nConvert linear RGB to non-linear RGB.\nParses a color hex code of format ‘#ff00bbff’ or ‘…\nParses a color hex code of format ‘#ff00bb’ or ‘#abc…\nConvert from a packed <code>u32</code> with specifiable component order.\nConvert from a packed <code>u32</code> with specifiable component order.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nPrimary green.\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(red, green, blue)</code> tuple.\nConvert a linear color to a different encoding.\nConvert the RGB components into another number type.\nConvert the color to linear RGB.\nConvert to a packed <code>u32</code> with with specifiable component …\nConvert to a packed <code>u32</code> with with specifiable component …\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nProduce a conversion matrix from <code>Xyz</code> to linear <code>Rgb</code>.\nReturn the <code>blue</code> value maximum.\nReturn the <code>green</code> value maximum.\nReturn the <code>red</code> value maximum.\nReturn the <code>blue</code> value minimum.\nReturn the <code>green</code> value minimum.\nReturn the <code>red</code> value minimum.\nCreate an RGB color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nPrimary red.\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe amount of red light, where 0.0 is no red light and 1.0 …\nGet a pre-defined matrix for converting an RGB value with …\nUpdate this color with new values.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nCreate a struct of vectors with a minimum capacity. See …\nGet a pre-defined matrix for converting an XYZ value into …\nRGBA color packed in ABGR order.\nRGBA color packed in ARGB order.\nRGBA color packed in BGRA order.\nRGBA color packed in RGBA order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCombines <code>serialize_as_array</code> and <code>deserialize_as_array</code> as a …\nCombines <code>serialize_as_uint</code> and <code>deserialize_as_uint</code> as a …\nDeserialize a value from an array of its components.\nDeserialize a value from an unsigned integer.\nDeserialize a transparent color without requiring the …\nDeserialize a premultiplied transparent color without …\nSerialize the value as an array of its components.\nSerialize the value as an unsigned integer.\nConverts from a stimulus color component type, while …\nConverts into a stimulus color component type, while …\nColor components that represent a stimulus intensity.\nA marker trait for colors where all components are stimuli.\nConverts <code>other</code> into <code>Self</code>, while performing the appropriate …\nConverts <code>self</code> into <code>T</code>, while performing the appropriate …\nThe highest displayable value this component type can …\nCIE standard illuminant A\nRepresents an unspecified reference white point.\nCIE standard illuminant B\nCIE standard illuminant C\nCIE D series standard illuminant - D50\nCIE D series standard illuminant - D50\nCIE D series standard illuminant - D55\nCIE D series standard illuminant - D55\nCIE D series standard illuminant - D65\nCIE D series standard illuminant - D65\nCIE D series standard illuminant - D75\nCIE D series standard illuminant - D75\nCIE standard illuminant E\nCIE fluorescent illuminant series - F11\nCIE fluorescent illuminant series - F2\nCIE fluorescent illuminant series - F7\nWhitePoint defines the Xyz color co-ordinates for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the Xyz chromaticity co-ordinates for the white point.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator for <code>Xyz</code> values.\nSamples colors uniformly.\nThe CIE 1931 XYZ color space.\nCIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(X, Y, Z)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(X, Y, Z)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nProduce a conversion matrix from <code>Lms</code> to <code>Xyz</code>.\nProduce a conversion matrix from linear <code>Rgb</code> to <code>Xyz</code>.\nReturn the <code>x</code> value maximum.\nReturn the <code>y</code> value maximum.\nReturn the <code>z</code> value maximum.\nMeta types and traits for <code>Xyz</code>.\nReturn the <code>x</code> value minimum.\nReturn the <code>y</code> value minimum.\nReturn the <code>z</code> value minimum.\nCreate a CIE XYZ color.\nNormalize <code>y</code> to <code>1.0</code>.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nChanges the reference white point without changing the …\nX is the scale of what can be seen as a response curve for …\nY is the luminance of the color, where 0.0 is black and …\nZ is the scale of what can be seen as the blue …\nImplemented by meta types that contain a meta type for <code>Xyz</code>.\nA meta type that can be used in <code>Xyz</code>.\nAn iterator for <code>Yxy</code> values.\nSamples colors uniformly.\nThe CIE 1931 Yxy (xyY) color space.\nCIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …\nThe transparency component. 0.0 (or 0u8) is fully …\nBorrow this color’s components as shared references.\nClear the component vectors. See <code>Vec::clear</code> for details.\nGet an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nluma (Y) was a measure of the brightness or luminance of a …\nReturn the <code>luma</code> value maximum.\nReturn the <code>x</code> value maximum.\nReturn the <code>y</code> value maximum.\nReturn the <code>luma</code> value minimum.\nReturn the <code>x</code> value minimum.\nReturn the <code>y</code> value minimum.\nCreate a CIE Yxy color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nChanges the reference white point without changing the …\nx chromaticity co-ordinate derived from XYZ color space as …\ny chromaticity co-ordinate derived from XYZ color space as …")